package com.example.demo.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.lenient;
import static org.mockito.Mockito.when;

import java.time.Instant;
import java.util.ArrayList;
import java.util.UUID;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.stereotype.Service;
import org.springframework.test.context.TestPropertySource;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.dto.PotDTO;
import com.example.demo.entity.Pot;
import com.example.demo.entity.UpdateDate;
import com.example.demo.entity.User;
import com.example.demo.enums.UserRole;
import com.example.demo.repositories.PotRepository;
import com.example.demo.repositories.UpdateDateRepository;
import com.example.demo.repositories.UserRepository;
import com.example.demo.service.exception.ResourceAlreadyExists;
import com.example.demo.service.exception.ResourceNotFoundException;

@TestPropertySource(properties = { "cloud.aws.credentials.accessKey=your-access-key",
		"cloud.aws.credentials.secretKey=your-secret-key", "cloud.aws.region.static=us-east-1",
		"cloud.aws.stack.auto=false", "cloud.aws.kms.enabled=false" })
@AutoConfigureMockMvc
@ExtendWith(MockitoExtension.class)
public class PotServiceTest {

	@Mock
	private UserRepository userRepository;

	@Mock
	private PotRepository potRepository;

	@Mock
	private UpdateDateRepository updateDateRepository;

	@InjectMocks
	private PotService potService;

	@DisplayName("I add new successfully")
	@Test
	public void iAddNewSuccessfully() {
		User user = new User(UUID.randomUUID(), "img", "test@gmail.com", "password_123", "name test", UserRole.USER);
		PotDTO data = new PotDTO("title", "description", (float) 205.50);
		
		UpdateDate update = new UpdateDate(UUID.randomUUID(), Instant.now(), data.monthlyAmount());
		Pot pot = new Pot(UUID.randomUUID(), "title", "description", (float) 205.50, new ArrayList<>());

		pot.getUpdate().add(update);
		
		when(potRepository.save(any(Pot.class))).thenReturn(pot);

		Pot request = potService.newPot(user, data);

		assertNotNull(request);
	}
	
	@Test
	public void potAlreadyExistsInlist() {
		User user = new User(UUID.randomUUID(), "img", "test@gmail.com", "password_123", "name test", UserRole.USER);
		PotDTO data = new PotDTO("title", "description", (float) 205.50);
		
		UpdateDate update = new UpdateDate(UUID.randomUUID(), Instant.now(), data.monthlyAmount());
		Pot pot = new Pot(UUID.randomUUID(), "title", "description", (float) 205.50, new ArrayList<>());
		
		pot.getUpdate().add(update);
		user.getPots().add(pot);
		
		assertThrows(ResourceNotFoundException.class,  () -> potService.newPot(user, data));
		
		
	}

}

/*

surgiu um erro em outro teste

	@Test
	public void potAlreadyExistsInlist() {
		User user = new User(UUID.randomUUID(), "img", "test@gmail.com", "password_123", "name test", UserRole.USER);
		PotDTO data = new PotDTO("title", "description", (float) 205.50);
		
		UpdateDate update = new UpdateDate(UUID.randomUUID(), Instant.now(), data.monthlyAmount());
		Pot pot = new Pot(UUID.randomUUID(), "title", "description", (float) 205.50, new ArrayList<>());
		
		pot.getUpdate().add(update);
		user.getPots().add(pot);
		
		assertThrows(ResourceNotFoundException.class,  () -> potService.newPot(user, data));
		
		
	}

	@Transactional
	public Pot newPot(User user, PotDTO data) {

		boolean existPot = user.getPots().stream().anyMatch(obj -> obj.getTitle().equals(data.title()));

		if (existPot) {
			throw new ResourceAlreadyExists("pot already exists in list");
		}

		Pot pot = new Pot(null, data.title(), data.description(), data.monthlyAmount(), new ArrayList<>());

		UpdateDate update = new UpdateDate(null, Instant.now(), data.monthlyAmount());
		update.setPot(pot);
		pot.getUpdate().add(update);

		pot.setUser(user);

		Pot response = potRepository.save(pot);
		user.getPots().add(response);

		return response;
	}

org.opentest4j.AssertionFailedError: Unexpected exception type thrown, expected: <com.example.demo.service.exception.ResourceNotFoundException> but was: <com.example.demo.service.exception.ResourceAlreadyExists>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:67)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:35)
	at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3128)
	at com.example.demo.service.PotServiceTest.potAlreadyExistsInlist(PotServiceTest.java:87)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: com.example.demo.service.exception.ResourceAlreadyExists: Resource already exists
	at com.example.demo.service.PotService.newPot(PotService.java:32)
	at com.example.demo.service.PotServiceTest.lambda$0(PotServiceTest.java:87)
	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:53)
	... 6 more





*/






































