package com.example.demo.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Optional;
import java.util.UUID;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.stereotype.Service;
import org.springframework.test.context.TestPropertySource;

import com.example.demo.dto.BudgetDTO;
import com.example.demo.dto.PotDTO;
import com.example.demo.entity.Budget;
import com.example.demo.entity.Pot;
import com.example.demo.entity.UpdateDate;
import com.example.demo.entity.User;
import com.example.demo.enums.UserRole;
import com.example.demo.repositories.BudgetRepository;
import com.example.demo.repositories.UpdateDateRepository;
import com.example.demo.repositories.UserRepository;
import com.example.demo.service.exception.ResourceNotFoundException;

import jakarta.transaction.Transactional;

@TestPropertySource(properties = { 
		"cloud.aws.credentials.accessKey=your-access-key",
		"cloud.aws.credentials.secretKey=your-secret-key", 
		"cloud.aws.region.static=us-east-1",
		"cloud.aws.stack.auto=false", 
		"cloud.aws.kms.enabled=false" })
@AutoConfigureMockMvc
@ExtendWith(MockitoExtension.class)
public class BudgetServiceTest {

	@Mock
	private UserRepository userRepository;
	
	@Mock
	private UpdateDateRepository updateDateRepository;
	
	@Mock
	private BudgetRepository budgetRepository;
	
	@InjectMocks
	private BudgetService budgetService;
	
	// addBudget
	@DisplayName("new budget added successfully")
	@Test
	public void newBudgetAddedSuccessfully() {
		User user = new User(
				UUID.randomUUID(), 
				"img", 
				"test@gmail.com", 
				"password_123", 
				"name test", 
				UserRole.USER
				);
		user.setBudget(new ArrayList<>());
		BudgetDTO data = new BudgetDTO("title", "description",(float) 205.45);
		
		UpdateDate update = new UpdateDate(UUID.randomUUID(), Instant.now(), data.monthlyAmount());
		Budget budget = new Budget(null, "title", "description",(float) 205.45);
		
		budget.getUpdate().add(update);
		
		when(budgetRepository.save(any(Budget.class))).thenReturn(budget);
		
		Budget request = budgetService.addBudget(user, data);
		
		assertNotNull(request);
	}
	
	@DisplayName("budget already exists in list")
	@Test
	public void budgetAlreadyExistsInList() {
		User user = new User(
				UUID.randomUUID(), 
				"img", 
				"test@gmail.com", 
				"password_123", 
				"name test", 
				UserRole.USER
				);
		user.setBudget(new ArrayList<>());
		BudgetDTO data = new BudgetDTO("title", "description",(float) 205.45);
		
		UpdateDate update = new UpdateDate(UUID.randomUUID(), Instant.now(), data.monthlyAmount());
		Budget budget = new Budget(UUID.randomUUID(), "title", "description",(float) 205.45);
		
		user.getBudget().add(budget);
		
		assertThrows(ResourceNotFoundException.class, () -> budgetService.addBudget(user, data));
		
	}
	
	// getBudget
	@DisplayName("successfully recovered the budget")
	@Test
	public void successfullyRecoveredTheBudget() {
		Budget budget = new Budget(UUID.randomUUID(), "title", "description",(float) 205.45);
		when(budgetRepository.findById(budget.getId())).thenReturn(Optional.of(budget));
		
		Budget response = budgetService.getBudget(budget.getId());
		
		assertNotNull(response);
	}
	
	@DisplayName("id is null")
	@Test
	public void idIsNull() {
		assertThrows(ResourceNotFoundException.class, () ->  budgetService.getBudget(null));
	}
	
	// editBudget
//	@DisplayName("editing the budget without changing the value")
//	@Test
//	public void editingTheBudgetWithoutChangingTheValue() {
//
//		User user = new User(
//				UUID.randomUUID(), 
//				"img", 
//				"test@gmail.com", 
//				"password_123", 
//				"name test", 
//				UserRole.USER
//				);
//		user.setBudget(new ArrayList<>());
//		
//		BudgetDTO data = new BudgetDTO("title edit", "description edit",(float) 205.45);
//		UpdateDate update = new UpdateDate(UUID.randomUUID(), Instant.now(), data.monthlyAmount());
//		Budget budget = new Budget(UUID.randomUUID(), "title", "description",(float) 205.45);
//		
//		Budget editBudget = new Budget(UUID.randomUUID(), data.title(), data.description(), 
//				data.monthlyAmount());
//		
//		budget.getUpdate().add(update);
//		editBudget.getUpdate().add(update);
//		
//		when(budgetRepository.findById(UUID.randomUUID())).thenReturn(Optional.of(budget));
//		when(budgetRepository.save(any(Budget.class))).thenReturn(editBudget);
//		
//		Budget request = budgetService.editBudget(data, UUID.randomUUID());
//		
//		assertNotNull(request);
//		
//	}
	
}

/*

surgiu um erro no meu teste

// editBudget
	@DisplayName("editing the budget without changing the value")
	@Test
	public void editingTheBudgetWithoutChangingTheValue() {

		User user = new User(
				UUID.randomUUID(), 
				"img", 
				"test@gmail.com", 
				"password_123", 
				"name test", 
				UserRole.USER
				);
		user.setBudget(new ArrayList<>());
		
		BudgetDTO data = new BudgetDTO("title edit", "description edit",(float) 205.45);
		UpdateDate update = new UpdateDate(UUID.randomUUID(), Instant.now(), data.monthlyAmount());
		Budget budget = new Budget(UUID.randomUUID(), "title", "description",(float) 205.45);
		
		Budget editBudget = new Budget(UUID.randomUUID(), data.title(), data.description(), 
				data.monthlyAmount());
		
		budget.getUpdate().add(update);
		editBudget.getUpdate().add(update);
		
		when(budgetRepository.findById(UUID.randomUUID())).thenReturn(Optional.of(budget));
		when(budgetRepository.save(any(Budget.class))).thenReturn(editBudget);
		
		Budget request = budgetService.editBudget(data, UUID.randomUUID());
		
		assertNotNull(request);
		
	}
	
	@Transactional
	public Budget editBudget(BudgetDTO data, UUID id) {
		
		Optional<Budget> requestOptional = this.budgetRepository.findById(id);
		Budget request = requestOptional.orElseThrow(() -> new ResourceNotFoundException("budget not found"));
		
		if (!data.monthlyAmount().equals(request.getMonthlyAmount()) && data.monthlyAmount() != null) {
			
			UpdateDate update = new UpdateDate(null, Instant.now(), data.monthlyAmount());
			update.setBudget(request);
			request.getUpdate().add(update);
			
			request.setMonthlyAmount(data.monthlyAmount());
		}
		
		String title = data.title() == null && data.title().equals("") 
				? request.getTitle()
				: data.title();
		
		String description = data.description() == null || data.description().equals("")
				? request.getDescription()
				: data.description();
		
		request.setTitle(title);
		request.setDescription(description);
		
		Budget response = this.budgetRepository.save(request);
		
		return response;
	}
	
	org.mockito.exceptions.misusing.PotentialStubbingProblem: 
Strict stubbing argument mismatch. Please check:
 - this invocation of 'findById' method:
    budgetRepository.findById(
    9d649d2e-f13a-4eb1-9ee6-a45262b55e9c
);
    -> at com.example.demo.service.BudgetService.editBudget(BudgetService.java:64)
 - has following stubbing(s) with different arguments:
    1. budgetRepository.findById(
    ce8c63aa-761c-4076-aa41-e4cd2a987220
);
      -> at com.example.demo.service.BudgetServiceTest.editingTheBudgetWithoutChangingTheValue(BudgetServiceTest.java:154)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).
For more information see javadoc for PotentialStubbingProblem class.
	at com.example.demo.service.BudgetService.editBudget(BudgetService.java:64)
	at com.example.demo.service.BudgetServiceTest.editingTheBudgetWithoutChangingTheValue(BudgetServiceTest.java:157)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)


	
	
	

*/














































