package com.example.demo.resource;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.PotDTO;
import com.example.demo.dto.ResponseListPotDTO;
import com.example.demo.entity.Pot;
import com.example.demo.entity.User;
import com.example.demo.service.PotService;
import com.example.demo.service.exception.AuthenticationFailed;
import com.example.demo.service.exception.ResourceNotFoundException;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;

@RestController
@RequestMapping(value = "/api/v1/pot")
public class PotController {

	@Autowired
	private PotService potService;

	@PostMapping
	public ResponseEntity<Pot> addNewPot(@AuthenticationPrincipal User user, @RequestBody PotDTO data) {

		if (user == null) {
			throw new AuthenticationFailed("invalid data");
		}

		Pot response = potService.newPot(user, data);

		return ResponseEntity.ok().body(response);
	}

	@GetMapping("/{id}")
	public ResponseEntity<Pot> getPot(@PathVariable UUID id) {

		Pot pot = potService.getIdPot(id);
		
		if (pot == null) {
			throw new ResourceNotFoundException("info pot not found");
		}

		return ResponseEntity.ok().body(pot);
	}

	@GetMapping
	public ResponseEntity<ResponseListPotDTO> getAllPots(@AuthenticationPrincipal User user,
			@RequestParam(defaultValue = "0") @Min(0) int page,
			@RequestParam(defaultValue = "10") @Max(15) @Min(1) int size) {

		if (user == null) {
			throw new AuthenticationFailed("invalid data");
		}

		Pageable pageable = PageRequest.of(page, size, Sort.by("id"));

		List<Pot> potList = user.getPots().stream().skip((long) page * size).limit(size).collect(Collectors.toList());

		ResponseListPotDTO response = new ResponseListPotDTO(potList, page, size, user.getPots().size(),
				(int) Math.ceil((double) user.getPots().size() / size), page * size < user.getPots().size());

		return ResponseEntity.ok().body(response);
	}
	
	@PatchMapping("/{id}")
	public ResponseEntity<Pot> editPot(@RequestBody PotDTO data, @PathVariable UUID id) {
		
		Pot response = potService.editPot(data, id);
		
		return ResponseEntity.ok().body(response);
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<?> deletePot(@PathVariable UUID id) {
		
		this.potService.deletePot(id);
		
		return ResponseEntity.noContent().build();
	}

}
























































