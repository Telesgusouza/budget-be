package com.example.demo.resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.AuthenticationDTO;
import com.example.demo.dto.EditPasswordDTO;
import com.example.demo.dto.EditUserDTO;
import com.example.demo.dto.RegisterDTO;
import com.example.demo.dto.ResponseTokenDTO;
import com.example.demo.dto.ResponseUserDTO;
import com.example.demo.entity.User;
import com.example.demo.service.AuthorizationService;

import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;

@Tag(name = "Authentication", description = "Contains operations related to the login and registration stage")
@RestController
@RequestMapping("/api/v1/auth")
public class AuthenticationController {

	@Autowired
	private AuthorizationService authorizationService;

//	@Autowired
//	private EmailService emailService;

	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody @Valid AuthenticationDTO data) {

		String token = authorizationService.login(data);

		return ResponseEntity.status(200).body(new ResponseTokenDTO(token));
	}

	@PostMapping("/register")
	public ResponseEntity<ResponseTokenDTO> register(@RequestBody @Valid RegisterDTO data) {

		String token = authorizationService.register(data);

		return ResponseEntity.status(201).body(new ResponseTokenDTO(token));
	}

	@GetMapping
	public ResponseEntity<ResponseUserDTO> getUser(@AuthenticationPrincipal User user) {
		
		System.out.println();
		
		System.out.println("======================");
		System.out.println(user);
		
		System.out.println();
		
	    if (user == null) {
	        return ResponseEntity.ok(new ResponseUserDTO(null, null, "anonymous", null));
	    }

		ResponseUserDTO responseUser = new ResponseUserDTO(user.getId(), user.getImg(), user.getUsername(),
				user.getName());

		return ResponseEntity.status(200).body(responseUser);
	}

//	@Operation(
//			summary = "get all info user",
//			description = "bring all user information",
//			responses = {
//					@ApiResponse(
//							responseCode = "200",
//							description = "data recovered successfully",
//							content = @Content(
//									mediaType = "application/json",
//									schema = @Schema(implementation = ResponseAllInfoUserDTO.class))
//							),
//					
//					@ApiResponse(
//							responseCode = "403",
//							description = "User not found",
//							content = @Content(
//									mediaType = "application/json",
//									schema = @Schema(implementation = StandardError.class))
//							)
//					
//					
//					
//			}
//			)
//	@GetMapping("/all-info")
//	public ResponseEntity<ResponseAllInfoUserDTO> getAllInfoUser(@AuthenticationPrincipal User user) {
//
//		if (user == null) {
//			throw new AuthenticationFailed("User not found");
//		}
//
//		ResponseAllInfoUserDTO responseUser = new ResponseAllInfoUserDTO(user.getId(), user.getImg(),
//				user.getUsername(), user.getName(),
//
//				 user.getTransaction(), user.getPots(), user.getAccount(), user.getBudget());
//		return ResponseEntity.status(200).body(responseUser);
//	}

	

	@DeleteMapping
	public ResponseEntity<?> deleteAccount(@AuthenticationPrincipal User user) {
		this.authorizationService.deleteAccount(user.getId());

		return ResponseEntity.noContent().build();
	}


	@PatchMapping
	public ResponseEntity<ResponseUserDTO> editUser(@RequestBody EditUserDTO data, @AuthenticationPrincipal User user) {

		ResponseUserDTO response = this.authorizationService.editUser(data, user.getId());

		return ResponseEntity.status(200).body(response);
	}


//	// edit password
//	@PostMapping("/html")
//	public ResponseEntity<?> postHTMLEmail(@RequestBody Mail mail, @AuthenticationPrincipal User user) {
//
//		this.emailService.sendHTMLEmail(mail, user.getId());
//		return ResponseEntity.noContent().build();
//	}


	@PatchMapping("/password")
	public ResponseEntity<?> editPassword(@RequestBody @Valid EditPasswordDTO data) {

		this.authorizationService.EditPassword(data);
		return ResponseEntity.noContent().build();
	}

}
