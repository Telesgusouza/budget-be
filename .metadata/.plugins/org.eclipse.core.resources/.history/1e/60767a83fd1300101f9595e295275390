package com.example.demo.service;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.dto.PotDTO;
import com.example.demo.entity.Pot;
import com.example.demo.entity.UpdateDate;
import com.example.demo.entity.User;
import com.example.demo.repositories.PotRepository;
import com.example.demo.repositories.UpdateDateRepository;
import com.example.demo.repositories.UserRepository;
import com.example.demo.service.exception.ResourceNotFoundException;

@Service
public class PotService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private PotRepository potRepository;

	@Autowired
	private UpdateDateRepository updateDateRepository;


    @Transactional
    public Pot newPot(User user, PotDTO data) {
        Pot pot = new Pot(null, data.title(), data.description(), 
                         data.monthlyAmount(), new ArrayList<>());
        
        UpdateDate update = new UpdateDate(null, Instant.now(), data.monthlyAmount());
        update.setPot(pot);  // Estabelece a relação bidirecional
        pot.getUpdate().add(update);
        
        Pot response = potRepository.save(pot);
        user.getPots().add(response);
        response.setUser(user);
        userRepository.save(user);
        
        return response;
    }

	public Pot getIdPot(UUID id) {

		if (id == null) {
			throw new ResourceNotFoundException("id cannot be null");
		}

		Optional<Pot> potOptional = potRepository.findById(id);
		Pot pot = potOptional.orElseThrow(() -> new ResourceNotFoundException("pot not found"));

		return pot;
	}

}
